{"version":3,"sources":["App.tsx","providers/encryptedChat.ts","reportWebVitals.ts","index.tsx"],"names":["node","receive","stream","a","crypto","keys","unmarshalPrivateKey","peerId","marshalPrivKey","pk","decryptedMsg","pipe","source","message","toString","decryptedMsgArray","Uint8Array","match","map","byte","parseInt","TextDecoder","decode","decrypt","send","msg","peerPubKey","peerStore","get","found","encryptedMessage","encrypt","TextEncoder","encode","hexEncMsg","reduce","str","padStart","addresses","length","dialProtocol","console","log","options","modules","transport","WS","WStar","connEncryption","NOISE","streamMuxer","mplex","pubsub","gossip","listen","config","enabled","App","React","useState","id","setId","setMsg","loading","setLoading","remotePeerKeyString","setRemote","setRemotePeerID","setPubKey","messageList","updateList","open","setOpen","chatOn","setChatOn","onCopy","useClipboard","useEffect","startUp","getKey","PeerID","createFromPubKey","peer","key","unmarshalPublicKey","marshalPubKey","create","bits","keyType","nodeId","nodeOptions","isStarted","stop","Libp2p","handle","mes","messages","from","start","toJSON","pubKey","toB58String","sendMessage","align","w","d","alignItems","isLoaded","identifier","value","mt","whiteSpace","overflow","textOverflow","cursor","onClick","maxWidth","placeholder","type","onChange","evt","target","position","height","left","size","justifyContent","spacing","bottom","opacity","bg","onKeyPress","aria-label","isDisabled","icon","isOpen","onClose","delay","onError","err","onScan","res","style","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6427bd43.chunk.js","sourcesContent":["import React from \"react\";\nimport Libp2p from \"libp2p\";\nimport WS from \"libp2p-websockets\";\nimport { NOISE } from \"libp2p-noise\";\nimport gossip from \"libp2p-gossipsub\";\nimport mplex from \"libp2p-mplex\";\nimport PeerID from \"peer-id\";\nimport WStar from \"libp2p-webrtc-star\";\nimport crypto from \"libp2p-crypto\";\nimport QRCode from \"qrcode.react\";\nimport QrReader from \"react-qr-scanner\";\nimport { HashedBotIdenticon } from \"@digitalungdom/bot-identicon\";\nimport { BiSend } from \"react-icons/bi\";\nimport {\n  Box,\n  Button,\n  Input,\n  Skeleton,\n  Text,\n  useClipboard,\n  VStack,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  HStack,\n  IconButton,\n} from \"@chakra-ui/react\";\n\nimport { send, receive } from \"./providers/encryptedChat\";\n\nimport { RsaPublicKey } from \"crypto\";\n\nvar node: Libp2p;\n\nconst options = {\n  modules: {\n    transport: [WS, WStar],\n    connEncryption: [NOISE],\n    streamMuxer: [mplex],\n    pubsub: gossip,\n  },\n  addresses: {\n    listen: [\n        \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n        \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n     // \"/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star\",\n    ],\n  },\n  config: {\n    pubsub: {\n      enabled: true,\n    },\n  },\n};\n\nexport default function App() {\n  const [id, setId] = React.useState(\"\");\n  const [msg, setMsg] = React.useState<string>();\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [remotePeerKeyString, setRemote] = React.useState<string>();\n  const [peerId, setRemotePeerID] = React.useState<PeerID>();\n  const [peerPubKey, setPubKey] = React.useState<RsaPublicKey>();\n  const [messageList, updateList] = React.useState<any[]>([]);\n  const [open, setOpen] = React.useState(false);\n  const [chatOn, setChatOn] = React.useState(false);\n  const { onCopy } = useClipboard(id);\n\n  React.useEffect(() => {\n    startUp();\n  }, []);\n\n  const getKey = async () => {\n    if (remotePeerKeyString) {\n      let peer = await PeerID.createFromPubKey(remotePeerKeyString);\n      let key = crypto.keys.unmarshalPublicKey(peer.marshalPubKey());\n      setRemotePeerID(peer);\n      //@ts-ignore\n      setPubKey(key as RsaPublicKey);\n      setChatOn(true);\n    }\n  };\n\n  const startUp = async () => {\n    setLoading(true);\n    let nodeId = await PeerID.create({ bits: 1024, keyType: \"RSA\" });\n    let nodeOptions = { ...options, peerId: nodeId };\n    if (node && node.isStarted) await node.stop();\n    //@ts-ignore\n    node = await Libp2p.create(nodeOptions);\n\n    await node.handle(\"/encryptedChat/1.0\", async ({ stream }) => {\n      let mes = await receive(stream, node);\n      updateList((messages) => [...messages, { from: \"them\", message: mes }]);\n    });\n    await node.start();\n    setId(node.peerId.toJSON().pubKey!);\n    console.log(\"listening on: \" + node.peerId.toB58String());\n    setLoading(false);\n  };\n\n  const sendMessage = async () => {\n    send(msg!, node, peerId!, peerPubKey);\n    updateList((messages) => [...messages, { from: \"me\", message: msg! }]);\n    setMsg(\"\");\n  };\n\n  return (\n    <VStack align=\"center\" w=\"100vw\">\n      {!chatOn && (\n        <>\n          <Box d=\"flex\" alignItems=\"baseline\">\n            <Skeleton isLoaded={!loading && id !== \"\"}>\n              <HashedBotIdenticon identifier={id} />\n            </Skeleton>\n            <Skeleton isLoaded={!loading && id !== \"\"}>\n              <Box align=\"center\">\n                <QRCode value={id ? id : \"\"} />\n                <Text\n                  mt={2}\n                  whiteSpace=\"nowrap\"\n                  overflow=\"hidden\"\n                  textOverflow=\"ellipsis\"\n                  w=\"200px\"\n                  cursor=\"pointer\"\n                  onClick={onCopy}\n                >\n                  {node && node.peerId.toJSON().pubKey}\n                </Text>\n              </Box>\n            </Skeleton>\n          </Box>\n          <Input\n            maxWidth=\"300px\"\n            value={remotePeerKeyString}\n            placeholder=\"Peer's Public Key\"\n            type=\"password\"\n            onChange={(evt) => setRemote(evt.target.value)}\n          />\n          <HStack>\n            <Button onClick={getKey}>Find a friend</Button>\n            <Button onClick={() => setOpen(true)}>Read QR Code</Button>\n          </HStack>\n        </>\n      )}\n      {chatOn && (\n        <Box>\n          <Box position=\"absolute\" height=\"100%\" w=\"100vw\" left=\"0px\">\n            {messageList.length > 0 &&\n              messageList.map((msg) => {\n                return (\n                  <HStack>\n                    <HashedBotIdenticon\n                      identifier={msg.from === \"me\" ? id : remotePeerKeyString}\n                      size={48}\n                    />\n                    <Text>{msg.message}</Text>\n                  </HStack>\n                );\n              })}\n          </Box>\n          <HStack\n            justifyContent=\"center\"\n            spacing={3}\n            position=\"fixed\"\n            bottom=\"0px\"\n            left=\"0px\"\n            w=\"100vw\"\n          >\n            <Input\n              opacity=\"100%\"\n              bg=\"white\"\n              placeholder=\"Say something\"\n              maxWidth=\"300px\"\n              value={msg}\n              onChange={(evt) => setMsg(evt.target.value)}\n              onKeyPress={(evt) => evt.key === 'Enter' && sendMessage()}\n            />\n            <IconButton\n              aria-label=\"send message\"\n              isDisabled={msg === \"\" || !peerId}\n              onClick={sendMessage}\n              icon={<BiSend />}\n            />\n          </HStack>\n        </Box>\n      )}\n      <Modal isOpen={open} onClose={() => setOpen(false)}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <QrReader\n                delay={300}\n                onError={(err: any) => console.log(err)}\n                onScan={(res: any) => {\n                  setRemote(res);\n                  if (res) setOpen(false);\n                }}\n                style={{ width: \"100%\" }}\n              />\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </VStack>\n  );\n}\n","import { pipe } from 'it-pipe'\nimport crypto from 'libp2p-crypto'\nimport libp2p from 'libp2p'\nimport PeerId from 'peer-id';\n\nexport const receive = async (stream: any, node: libp2p): Promise<string> => {\n    let pk = await crypto.keys.unmarshalPrivateKey(\n      node.peerId.marshalPrivKey()\n    );\n    let decryptedMsg = '';\n    await pipe(stream.source, async function (source) {\n      let message = \"\";\n      for await (const msg of source) {\n        message += msg.toString(\"utf8\");\n      }\n      let decryptedMsgArray = new Uint8Array(message.match(/.{1,2}/g)!.map((byte: string) => parseInt(byte, 16))\n      );\n      //@ts-ignore\n      decryptedMsg = new TextDecoder().decode(pk.decrypt(decryptedMsgArray));\n    });\n    return decryptedMsg;\n  };\n\nexport const send = async (msg: string, node: libp2p, peerId: PeerId, peerPubKey: any) => {\n\n    if (peerId) {\n      let found = await node.peerStore.get(peerId);\n      //@ts-ignore\n      let encryptedMessage = peerPubKey.encrypt(new TextEncoder().encode(msg));\n      let hexEncMsg = encryptedMessage.reduce(\n        (str: string, byte: number) => str + byte.toString(16).padStart(2, \"0\"),\n        \"\"\n      );\n      if (found && found.addresses.length > 0 && msg && node) {\n        try {\n          const { stream } = await node.dialProtocol(peerId, [\"/encryptedChat/1.0\"]);\n          pipe(hexEncMsg, stream);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  };","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}