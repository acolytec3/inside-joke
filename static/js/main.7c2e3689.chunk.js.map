{"version":3,"sources":["context/globalContext.ts","components/pictureBox.tsx","components/fileUpload.tsx","components/gallery.tsx","reducers/globalReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","ipfs","username","password","location","lat","lon","GlobalContext","createContext","state","dispatch","PictureBox","React","useContext","useState","photo","setPhoto","useDisclosure","isOpen","onOpen","onClose","toast","useToast","dataURItoBlob","dataURI","byteString","atob","split","mimeString","arrayBuffer","ArrayBuffer","length","_ia","Uint8Array","i","charCodeAt","dataView","DataView","Blob","type","handleTakePhoto","dataUri","a","uploadPhoto","blob","add","progress","prog","console","log","added","orbit","path","hash","get","position","status","title","description","duration","error","align","alignSelf","width","onClick","isDisabled","navigator","mediaDevices","maxWidth","src","color","isCentered","size","onTakePhoto","onCameraError","alert","toString","idealFacingMode","FACING_MODES","ENVIRONMENT","isImageMirror","FileUploader","fileRef","useRef","setLat","setLon","undefined","handleUpload","evt","files","target","latitude","longitude","isInline","w","current","click","ref","id","name","style","onChange","placeholder","defaultValue","value","Gallery","gallery","showGallery","activeMarker","setActive","parseFloat","MyMap","media","iterator","limit","collect","filter","picture","payload","Map","center","zoom","height","map","Marker","key","TileLayer","url","attribution","Popup","clock","objectFit","alt","PictureWall","minChildWidth","spacingX","spacingY","spacing","direction","mw","reducer","action","keyPair","window","LOG","App","useReducer","loading","setLoading","loaded","setLoaded","loadingMessage","setMessage","startUp","geolocation","getCurrentPosition","coords","buffer","TextEncoder","encode","getKeyPairFromSeed","privateKeyFormat","publicKeyFormat","crypto","keys","import","privateKey","PeerID","createFromPrivKey","marshalPrivateKey","peer","Ipfs","create","libp2p","PeerId","relay","enabled","hop","active","repo","config","Addresses","Swarm","pubsub","on","connection","remotePeer","toB58String","orbitdb","createInstance","determineAddress","accessController","write","dbAddr","open","events","eventlog","load","addr","msg","setTimeout","swarm","connect","Login","setName","setPassword","isRequired","Provider","isFitted","bottom","left","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c2e3689.chunk.js","sourcesContent":["import { createContext } from 'react'\nimport EventStore from 'orbit-db-eventstore';\n\nexport type globalState = {\n    ipfs: any,\n    username: string,\n    password: string,\n    keyPair?: any,\n    orbit?: EventStore<any>,\n    location: {\n        lat: string,\n        lon: string\n    }\n}\n\nexport const initialState = {\n    ipfs: null,\n    username: '',\n    password: '',\n    location: {\n        lat: '',\n        lon: ''\n    }\n}\n\nconst GlobalContext = createContext<{ state: globalState, dispatch: React.Dispatch<any> }>({ state: initialState, dispatch: () => null })\n\nexport { GlobalContext as default }","import React from 'react';\nimport {\n    Text, Image,\n    Button, Stack, useToast, Modal, ModalOverlay, ModalContent, ModalBody, useDisclosure, \n} from '@chakra-ui/react';\nimport Camera, { FACING_MODES } from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport GlobalContext from '../context/globalContext'\n\nconst PictureBox = () => {\n    const state = React.useContext(GlobalContext)\n    const [photo, setPhoto] = React.useState('')\n\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n    const toast = useToast()\n\n    function dataURItoBlob(dataURI: string) {\n        // convert base64 to raw binary data held in a string\n        var byteString = atob(dataURI.split(',')[1]);\n\n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n        // write the bytes of the string to an ArrayBuffer\n        var arrayBuffer = new ArrayBuffer(byteString.length);\n        var _ia = new Uint8Array(arrayBuffer);\n        for (var i = 0; i < byteString.length; i++) {\n            _ia[i] = byteString.charCodeAt(i);\n        }\n\n        var dataView = new DataView(arrayBuffer);\n        var blob = new Blob([dataView], { type: mimeString });\n        return blob;\n    }\n\n    const handleTakePhoto = async (dataUri: string) => {\n        setPhoto(dataUri)\n        onClose()\n    }\n\n    const uploadPhoto = async (lat: string, lon: string) => {\n        try {\n            let blob = dataURItoBlob(photo)\n            if (state.state.ipfs) {\n                let added = await state.state.ipfs.add(blob, {\n                    progress: (prog: any) => console.log(`received: ${prog}`)\n                })\n                console.log(added)\n                let hash = await state.state.orbit!.add({ 'hash': added.path, 'username': state.state.username, 'lat': lat, 'lon': lon })\n                console.log('Lets verify the hash')\n                console.log(state.state.orbit!.get(hash))\n                toast({\n                    position: \"top\",\n                    status: 'success',\n                    title: 'Media uploaded',\n                    description: 'You should see your media in the Gallery shortly',\n                    duration: 5000,\n                })\n                setPhoto('')\n            }\n        } catch (error) {\n            console.error(error);\n            toast({\n                position: \"top\",\n                status: 'error',\n                title: 'Something went wrong',\n                description: 'Please try again',\n                duration: 5000,\n            })\n        }\n    }\n\n    return (\n        <Stack align=\"center\">\n\n            {(photo === '') ? <Button alignSelf=\"center\" width=\"200px\" onClick={onOpen} isDisabled={!navigator.mediaDevices}>Take Picture</Button>\n                :\n                <Stack maxWidth=\"100vh\" align=\"center\">\n                    <Image maxWidth=\"100px\" src={photo} />\n                    {(state.state.location && state.state.location.lat !== '') &&\n                        <Text color=\"white\">Latitude: {state.state.location!.lat}, Longitude: {state.state.location.lon}</Text>}\n                    <Button alignSelf=\"center\" width=\"200px\" onClick={() => {\n                        let lat: string\n                        let lon: string\n                        if (state.state.location) {\n                            lat = state.state.location.lat\n                            lon = state.state.location.lon\n                        }\n                        else { lat = ''; lon = '' }\n                        uploadPhoto(lat, lon)\n                    }}>Upload Picture</Button>\n                </Stack>}\n                {!navigator.mediaDevices && <Text color=\"white\">The camera is unavailable in this browser</Text>}\n\n            <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"100%\">\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalBody>\n                        <Camera\n                            onTakePhoto={(dataUri) => { handleTakePhoto(dataUri); }}\n                            onCameraError={(error) => { alert(error.toString()); }}\n                            idealFacingMode={FACING_MODES.ENVIRONMENT}\n                            isImageMirror={false}\n                        />\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n        </Stack>\n    )\n}\n\nexport default PictureBox","import React, { ChangeEvent } from 'react'\nimport { Button, Stack, Box, useToast, Input } from '@chakra-ui/react';\nimport GlobalContext from '../context/globalContext'\n\nconst FileUploader = () => {\n    const state = React.useContext(GlobalContext)\n    const fileRef = React.useRef<HTMLInputElement>(null)\n    const [lat, setLat] = React.useState(state.state.location.lat)\n    const [lon, setLon] = React.useState(state.state.location.lon)\n    const [photo, setPhoto] = React.useState(undefined as unknown)\n    const toast = useToast();\n\n    const handleClick = () => {\n        if (fileRef.current) fileRef.current.click()\n    }\n\n    const handleUpload = async (evt: ChangeEvent<HTMLInputElement>) => {\n        let files = evt.target.files\n        if (files && files.length > 0) setPhoto(files[0])\n    }\n\n    const uploadPhoto = async () => {\n        try {\n            let blob = photo\n            let latitude = (lat !== '') ? lat : state.state.location.lat\n            let longitude = (lon !== '') ? lon : state.state.location.lon\n            if (state.state.ipfs) {\n                let added = await state.state.ipfs.add(blob, {\n                    progress: (prog: any) => console.log(`received: ${prog}`)\n                })\n                console.log(added)\n                let hash = await state.state.orbit!.add({ 'hash': added.path, 'username': state.state.username, 'lat': latitude, 'lon': longitude })\n                console.log('Lets verify the hash')\n                console.log(state.state.orbit!.get(hash))\n                toast({\n                    position: \"top\",\n                    status: 'success',\n                    title: 'Media uploaded',\n                    description: 'You should see your media in the Gallery shortly',\n                    duration: 5000,\n                })\n            }\n        } catch (error) {\n            console.error(error);\n            toast({\n                position: \"top\",\n                status: 'error',\n                title: 'Something went wrong',\n                description: 'Please try again',\n                duration: 5000,\n            })\n        }\n        setPhoto(undefined)\n    }\n    return (\n        <Box>\n            <Stack align=\"center\">\n                <Stack isInline>\n                    <Button w=\"200px\" onClick={handleClick}>Select Media</Button>\n                    <Button w=\"200px\" isDisabled={!photo} onClick={uploadPhoto}>Upload Media</Button>\n                </Stack>\n                <input ref={fileRef} type=\"file\" id=\"filePicker\" name='filePicker' style={{ \"display\": \"none\" }} onChange={handleUpload} />\n                <Stack>\n                    <Input placeholder=\"Latitude\" defaultValue={state.state.location.lat} onChange={(evt: any) => setLat(evt.target.value)} />\n                    <Input placeholder=\"Longitude\" defaultValue={state.state.location.lon}onChange={(evt: any) => setLon(evt.target.value)} />\n                </Stack>\n            </Stack>\n        </Box>\n    )\n}\n\nexport default FileUploader","import React from 'react'\nimport { Button, Stack, Box, Image, Text, useDisclosure, \n    Modal, ModalBody, ModalContent, ModalOverlay, ModalCloseButton, ModalHeader, SimpleGrid, Flex } from '@chakra-ui/react';\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport GlobalContext from '../context/globalContext'\nimport { LatLngTuple } from 'leaflet'\n\nconst Gallery = () => {\n    const state = React.useContext(GlobalContext)\n    const [gallery, showGallery] = React.useState(false)\n    const {isOpen, onOpen, onClose } = useDisclosure();\n    const [activeMarker, setActive] = React.useState(null as any)\n    const [location, setLoc] = React.useState([parseFloat(state.state.location.lat),parseFloat(state.state.location.lon)] as LatLngTuple)\n\n    const handleClick = () => {\n        showGallery(!gallery)\n\n    }\n\n    const MyMap = () => {\n        let media = state.state.orbit!.iterator({ limit: -1 }).collect().filter((picture) => picture.payload.value.lat !== undefined)\n        return (\n            <Map center={location} zoom={12} style={{ height: \"60vh\" }} >\n                 {media.map((picture: any) => (\n                <Marker key={picture.hash}\n                    position={[picture.payload.value.lat, picture.payload.value.lon]}\n                    onClick={() => setActive(picture)}\n                />))}\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {activeMarker && <Popup position={[activeMarker.payload.value.lat, activeMarker.payload.value.lon]}\n                onClose={() => setActive(null)}>\n                <Stack key={activeMarker.clock.toString()} isInline>\n                    <Image key={activeMarker.hash}\n                        width=\"100px\"\n                        objectFit=\"cover\"\n                        src={`https://gateway.ipfs.io/ipfs/${activeMarker.payload.value.hash}`}\n                        alt=\"Unknown\"\n                    />\n                    {activeMarker.payload.value.username && <Text color=\"white\" key={activeMarker.hash + '1'}>Posted by {activeMarker.payload.value.username}</Text>}\n                </Stack>\n            </Popup>}\n                \n            </Map>)\n    }\n\n    const PictureWall = () => {\n        let media = state.state.orbit!.iterator({ limit: -1 }).collect()\n        return (<SimpleGrid minChildWidth=\"100px\" spacingX=\"20px\" spacingY=\"10px\">\n            {media.map((picture) => {\n                return <Stack isInline key={picture.clock.toString()} spacing={1}>\n                    <Image key={picture.hash}\n                        width=\"100px\"\n                        objectFit=\"cover\"\n                        src={`https://gateway.ipfs.io/ipfs/${picture.payload.value.hash}`}\n                        alt=\"Unknown\"\n                    />\n                    {picture.payload.value.username && <Text color=\"white\" key={picture.hash + '1'}>Posted by {picture.payload.value.username}</Text>}\n                </Stack>\n            })}\n        </SimpleGrid>)\n    }\n    return (\n        <Box>\n            <Flex align=\"center\" direction=\"column\" >\n                <Stack isInline><Button mw=\"50vw\" onClick={handleClick}>View Posted Media</Button>\n                <Button w=\"200px\" onClick={onOpen}>Open Map</Button></Stack>\n                {gallery && <PictureWall />}\n                <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"100%\">\n                    <ModalOverlay />\n                    <ModalHeader>Reported Activity</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalContent>\n                        <ModalBody>\n                            <MyMap />\n                        </ModalBody>\n                    </ModalContent>\n                </Modal>\n            </Flex>\n\n        </Box>\n    )\n}\n\nexport default Gallery","import { globalState} from '../context/globalContext';\n\nconst reducer = (state: globalState, action: { type: string, payload: any }): globalState => {\n    if (action.type !== 'LOGIN') console.log(state)\n    if (action.type !== 'LOGIN') console.log(action)\n    switch (action.type) {\n        case 'START_IPFS': {\n            return { ...state, ipfs: action.payload.ipfs }\n        }\n        case 'LOGIN':\n            return { ...state, username: action.payload.username, password: action.payload.password, keyPair: action.payload.keyPair }\n        case 'SET_KEYPAIR':\n            return { ...state, keyPair: action.payload.keyPair, username: '', password: '' }\n        case 'START_ORBIT':\n            return { ...state, orbit: action.payload.orbit }\n        case 'SET_LOCATION':\n            return { ...state, location: action.payload.location }\n        default:\n            return state;\n    }\n}\n\nexport default reducer","\nimport React from 'react';\nimport { ChakraProvider, Stack, Spinner, Button, Input, Tabs, TabList, TabPanel, TabPanels, Tab, Text, Heading } from '@chakra-ui/react';\nimport Ipfs from 'ipfs-core'\nimport orbitdb from 'orbit-db'\nimport PeerID from 'peer-id'\nimport EventStore from 'orbit-db-eventstore';\nimport crypto from 'libp2p-crypto'\n//@ts-ignore\nimport { getKeyPairFromSeed } from 'human-crypto-keys'\nimport PictureBox from './components/pictureBox'\nimport FileUploader from './components/fileUpload'\nimport './App.css';\nimport Gallery from './components/gallery';\nimport GlobalContext, { initialState } from './context/globalContext'\nimport reducer from './reducers/globalReducer'\n//@ts-ignore\nwindow.LOG = 'orbit*'\n\n\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const [loading, setLoading] = React.useState(false)\n  const [loaded, setLoaded] = React.useState(false)\n  const [loadingMessage, setMessage] = React.useState('')\n\n  const startUp = async () => {\n    setLoading(true)\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        dispatch({ type: 'SET_LOCATION', payload: { location: { lat: position.coords.latitude, lon: position.coords.longitude } } })\n      })\n    }\n    try {\n       setMessage('Deriving Keys')\n      let salt = \"ihatemakinguplongpasswords\"\n      let buffer = new TextEncoder().encode(state.username + state.password + salt)\n      let keyPair = await getKeyPairFromSeed(buffer, 'rsa', { privateKeyFormat: 'raw-pem', publicKeyFormat: 'raw-pem' });\n      dispatch({ type: 'SET_KEYPAIR', payload: { keyPair: keyPair } })\n      setMessage('Connecting to IPFS')\n      let privateKey = await crypto.keys.import(keyPair.privateKey, '');\n      let peer = await PeerID.createFromPrivKey(crypto.keys.marshalPrivateKey(privateKey, \"rsa\"))\n      //@ts-ignore\n      let ipfs = await Ipfs.create(\n        {\n          libp2p: { PeerId: peer},\n          relay: { enabled: true, hop: { enabled: true, active: true } },\n          repo: \"ipfs-inside-joke\",\n          config: {\n            Addresses: {\n              Swarm: [\"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n                \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n              ]\n            },\n          pubsub: {}\n      \n          }\n        })\n      \n      ipfs.libp2p.on(\"peer:connect\", (connection: any) => console.log(`connected to ${connection.remotePeer.toB58String()}`))\n      console.log('IPFS Started')\n      setMessage('Connecting to Orbit-DB')\n      let orbit = await orbitdb.createInstance(ipfs)\n      //@ts-ignore\n      let dbAddr = await orbit.determineAddress('monkey-knuckles', 'eventlog', { accessController: { write: ['*'] } })\n      console.log('address is', dbAddr)\n      let events: EventStore<any>\n      if (dbAddr) {\n        //@ts-ignore\n        events = (await orbit.open(dbAddr )) as EventStore<any>;\n        console.log('found Db!', events)\n      }\n      else\n        events = await orbit.eventlog<any>('monkey-knuckles',{})\n      await events.load()\n      events.events.on('replicate', (addr) => console.log('Replicating DB to ', addr))\n      events.events.on('peer', (peer) => console.log('Found a peer with our DB', peer))\n      events.events.on('replicate.progress', (msg) => console.log(msg))\n      events.events.on('replicated', (msg) => console.log('Replicating DB from', msg))\n      console.log('Orbit DB initiated')\n      dispatch({ type: 'START_IPFS', payload: { ipfs: ipfs } })\n      dispatch({ type: 'START_ORBIT', payload: { orbit: events } })\n      setLoading(false)\n      setLoaded(true)\n      setTimeout(() => {ipfs.swarm.connect('/ip4/172.31.1.4/tcp/4003/ws/p2p/QmaSDYtcdw1fuK4DGVSF2zK1QxNTUwM9GVM458AG9SFekE'); console.log('dialing')},3000)\n    } catch (error) {\n      console.error('IPFS init error:', error)\n      setLoading(false) \n    }\n\n  }\n\n  const Login = () => {\n    const [username, setName] = React.useState('')\n    const [password, setPassword] = React.useState('')\n\n    const handleLogin = () => {\n      //@ts-ignore\n      dispatch({ type: 'LOGIN', payload: { username: username, password: password } })\n      startUp();\n    }\n    return (\n      <Stack align=\"center\" >\n        <Input w=\"200px\" isRequired placeholder=\"Username\" value={username} onChange={(evt: any) => setName(evt.target.value)} />\n        <Input w=\"200px\" isRequired placeholder=\"Password\" type=\"password\" value={password} onChange={(evt: any) => setPassword(evt.target.value)} />\n        <Button w=\"150px\" onClick={handleLogin}>Login</Button>\n      </Stack>\n    )\n  }\n\n  return (\n    <ChakraProvider>\n      <GlobalContext.Provider value={{ dispatch, state }}>\n        <Stack align=\"center\" w=\"100%\">\n        <Heading>Inside Joke</Heading>\n          <Stack align=\"center\">\n          </Stack>\n          {(!state.keyPair && state.username === '') && <Login />}\n          {loading && <Stack align=\"center\" >\n            <Spinner />\n            <Text>{loadingMessage}</Text>\n            </Stack>}\n\n          {loaded && <Tabs isFitted align=\"center\" size=\"lg\">\n            <TabPanels>\n              <TabPanel>\n                <PictureBox />\n              </TabPanel>\n              <TabPanel>\n                <FileUploader />\n              </TabPanel>\n              <TabPanel>\n                <Gallery />\n              </TabPanel>\n            </TabPanels>\n            <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n              <Tab>\n                Camera\n              </Tab>\n              <Tab>\n                Media\n              </Tab>\n              <Tab>\n                Gallery\n              </Tab>\n            </TabList>\n          </Tabs>}\n        </Stack>\n      </GlobalContext.Provider>\n    </ChakraProvider>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}