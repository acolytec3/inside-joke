{"version":3,"sources":["App.tsx","context/globalContext.ts","reducers/globalReducer.ts","components/profile.tsx","components/peerProfile.tsx","providers/encryptedChat.ts","context/constants.ts","components/chatWindow.tsx","reportWebVitals.ts","index.tsx"],"names":["node","initState","libp2p","undefined","remotePeer","remotePeerPubKeyString","remotePeerPubKey","GlobalContext","createContext","state","dispatch","globalReducer","action","console","log","type","payload","Profile","React","useState","loading","setLoading","id","setId","useContext","onCopy","useClipboard","useEffect","mounted","peerId","toJSON","privKey","d","alignItems","isLoaded","identifier","align","marginY","value","size","mt","whiteSpace","overflow","textOverflow","w","cursor","onClick","pubKey","PeerProfile","chatOff","dialing","setDialing","remote","setRemote","open","setOpen","toast","useToast","getKey","a","PeerId","createFromPrivKey","peer","crypto","keys","unmarshalPrivateKey","marshalPrivKey","key","title","description","status","duration","isClosable","position","time","Date","now","connected","ping","Promise","resolve","setTimeout","height","width","placeholder","onChange","evt","target","isCentered","closeOnEsc","isOpen","onClose","h","mr","delay","onError","err","onScan","res","style","receive","stream","pk","decryptedMsg","pipe","source","message","toString","decryptedMsgArray","Uint8Array","match","map","byte","parseInt","TextDecoder","decode","decrypt","send","msg","peerPubKey","peerStore","get","found","encryptedMessage","encrypt","TextEncoder","encode","hexEncMsg","reduce","str","padStart","addresses","length","dialProtocol","TYPING","NOT_TYPING","ChatWindow","chatOn","setMsg","messageList","updateList","showTyping","setTyping","stillTyping","setStillTyping","handle","mes","messages","from","checkPulse","sendMessage","typing","left","justifyContent","spacing","bottom","opacity","bg","maxWidth","onKeyPress","aria-label","isDisabled","icon","options","modules","transport","WS","WStar","connEncryption","NOISE","streamMuxer","mplex","pubsub","gossip","listen","config","enabled","App","useReducer","setChatOn","startUp","PeerID","create","bits","keyType","nodeId","nodeOptions","isStarted","stop","Libp2p","start","toB58String","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b6c42f4.chunk.js","sourcesContent":["import React from \"react\";\nimport Libp2p from \"libp2p\";\nimport WS from \"libp2p-websockets\";\nimport { NOISE } from \"libp2p-noise\";\nimport gossip from \"libp2p-gossipsub\";\nimport mplex from \"libp2p-mplex\";\nimport PeerID from \"peer-id\";\nimport WStar from \"libp2p-webrtc-star\";\n\nimport GlobalContext, { initState } from \"./context/globalContext\";\nimport { VStack } from \"@chakra-ui/react\";\n\nimport globalReducer from \"./reducers/globalReducer\";\nimport Profile from \"./components/profile\";\nimport PeerProfile from \"./components/peerProfile\";\nimport ChatWindow from \"./components/chatWindow\";\n\nvar node: Libp2p;\n\nconst options = {\n  modules: {\n    transport: [WS, WStar],\n    connEncryption: [NOISE],\n    streamMuxer: [mplex],\n    pubsub: gossip,\n  },\n  addresses: {\n    listen: [\n     \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n     \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n     // \"/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star\",\n    ],\n  },\n  config: {\n    pubsub: {\n      enabled: true,\n    },\n  },\n};\n\nexport default function App() {\n  const [state, dispatch] = React.useReducer(globalReducer, initState);\n  const [chatOn, setChatOn] = React.useState(false);\n\n  React.useEffect(() => {\n    startUp();\n  }, []);\n\n  const startUp = async () => {\n    let nodeId = await PeerID.create({ bits: 1024, keyType: \"RSA\" });\n    let nodeOptions = { ...options, peerId: nodeId };\n    if (node && node.isStarted) await node.stop();\n    //@ts-ignore\n    node = await Libp2p.create(nodeOptions);\n    dispatch({ type: \"LOAD_NODE\", payload: node });\n    await node.start();\n    console.log(\"listening on: \" + node.peerId.toB58String());\n  };\n\n  return (\n    <GlobalContext.Provider value={{ dispatch, state }}>\n      <VStack align=\"center\" w=\"100vw\">\n        {!chatOn && (\n          <>\n            <Profile />\n            <PeerProfile chatOff={() => setChatOn(true)} />\n          </>\n        )}\n        {chatOn && (\n          <ChatWindow chatOn={chatOn} chatOff={() => setChatOn(false)} />\n        )}\n      </VStack>\n    </GlobalContext.Provider>\n  );\n}\n","import { createContext } from 'react'\nimport Libp2p  from 'libp2p'\nimport PeerId from 'peer-id'\nimport { RsaPublicKey } from 'crypto'\n\nexport type globalState = {\n    libp2p: Libp2p | undefined,\n    remotePeer: PeerId | undefined,\n    remotePeerPubKeyString: string | undefined,\n    remotePeerPubKey: RsaPublicKey | undefined\n}\n\nexport const initState: globalState = {\n        libp2p: undefined,\n        remotePeer: undefined,\n        remotePeerPubKeyString: '',\n        remotePeerPubKey: undefined\n\n}\n\nconst GlobalContext = createContext<{state:globalState, dispatch: React.Dispatch<any>}>({state: initState, dispatch: () => null} )\n\nexport { GlobalContext as default }","import { globalState } from \"../context/globalContext\";\n\nconst globalReducer = (\n  state: globalState,\n  action: { type: string; payload: any }\n): globalState => {\n  console.log(\"Current state is:\");\n  console.log(state);\n  console.log(\"Action requested is:\");\n  console.log(action);\n\n  switch (action.type) {\n    case \"LOAD_NODE\": {\n      return { ...state, libp2p: action.payload };\n    }\n\n    case \"SET_PEER\": {\n      console.log('action is', action)\n      return { ...state, \n        remotePeer: action.payload.remotePeer, \n        remotePeerPubKey: action.payload.remotePeerPubKey, \n        remotePeerPubKeyString: action.payload.remotePeerPubKeyString }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default globalReducer;\n","import React from \"react\";\nimport GlobalContext from \"../context/globalContext\";\nimport { Box, Skeleton, Text, useClipboard } from \"@chakra-ui/react\";\nimport { HashedBotIdenticon } from \"@digitalungdom/bot-identicon\";\nimport QRCode from \"qrcode.react\";\n\nconst Profile = () => {\n  const [loading, setLoading] = React.useState(true);\n  const [id, setId] = React.useState<string>(\"\");\n  const { state } = React.useContext(GlobalContext);\n  const { onCopy } = useClipboard(id);\n\n  React.useEffect(() => {\n    let mounted = true;\n    console.log(state.libp2p);\n    if (state.libp2p?.peerId && mounted) {\n      setId(state.libp2p.peerId.toJSON().privKey!);\n      setLoading(false);\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [state.libp2p]);\n\n  return (\n    <Box d=\"flex\" alignItems=\"baseline\">\n      <Skeleton isLoaded={!loading && id !== \"\"}>\n        <HashedBotIdenticon identifier={id} />\n      </Skeleton>\n      <Skeleton isLoaded={!loading && id !== \"\"}>\n        <Box align=\"center\" marginY={5}>\n          <QRCode value={id ? id : \"\"} size={400} />\n          <Text\n            mt={2}\n            whiteSpace=\"nowrap\"\n            overflow=\"hidden\"\n            textOverflow=\"ellipsis\"\n            w=\"200px\"\n            cursor=\"pointer\"\n            onClick={onCopy}\n          >\n            {state.libp2p && state.libp2p.peerId.toJSON().pubKey}\n          </Text>\n        </Box>\n      </Skeleton>\n    </Box>\n  );\n};\n\nexport default Profile;\n","import {\n  Box,\n  Button,\n  Center,\n  HStack,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalOverlay,\n  Skeleton,\n  Spinner,\n  Text,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { HashedBotIdenticon } from \"@digitalungdom/bot-identicon\";\nimport PeerId from \"peer-id\";\nimport React from \"react\";\nimport GlobalContext from \"../context/globalContext\";\nimport crypto from \"libp2p-crypto\";\nimport { RsaPublicKey } from \"crypto\";\nimport QrReader from \"react-qr-scanner\";\n\ninterface PeerProps {\n  chatOff: () => void;\n}\n\nconst PeerProfile: React.FC<PeerProps> = ({ chatOff }) => {\n  const { state, dispatch } = React.useContext(GlobalContext);\n  const [dialing, setDialing] = React.useState(false);\n  const [remote, setRemote] = React.useState<string>(\"\");\n  const [open, setOpen] = React.useState(false);\n  const toast = useToast();\n\n  const getKey = async () => {\n    if (remote) {\n      setDialing(true);\n      let peer: PeerId;\n      let key: crypto.PrivateKey;\n      try {\n        peer = await PeerId.createFromPrivKey(remote);\n        console.log(peer)\n        key = await crypto.keys.unmarshalPrivateKey(peer.marshalPrivKey());\n        console.log(key)\n      } catch (err) {\n        console.log(\"Error!\", err);\n        toast({\n          title: \"Invalid address\",\n          description: \"Scan your friend's QR code and try again\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n        setRemote(\"\");\n        setDialing(false);\n        return;\n      }\n      let time = Date.now();\n      let connected = false;\n      do {\n        try {\n          console.log(\"ping \", await state.libp2p?.ping(peer));\n          connected = true;\n        } catch (err) {\n          await new Promise((resolve) => setTimeout(resolve, 2000));\n          console.log(\"Error!\", err);\n        }\n      } while (Date.now() - time < 5000 && !connected);\n      if (connected) {\n        dispatch({\n          type: \"SET_PEER\",\n          payload: {\n            remotePeer: peer,\n            //@ts-ignore\n            remotePeerPubKey: key as RsaPublicKey,\n            remotePeerPubKeyString: remote,\n          },\n        });\n        chatOff();\n      } else {\n        toast({\n          title: \"Couldn't find friend!\",\n          description: \"Scan your friend's QR code and try again\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n      }\n      setRemote(\"\");\n      setDialing(false);\n    }\n  };\n\n  return (\n    <Box d=\"flex\" alignItems=\"baseline\">\n      <Skeleton isLoaded={remote !== \"\"}>\n        <HashedBotIdenticon identifier={remote} />\n      </Skeleton>\n      <Box align=\"center\">\n        <Textarea\n          height=\"200px\"\n          width=\"200px\"\n          value={remote}\n          placeholder=\"Peer's Public Key\"\n          type=\"password\"\n          onChange={(evt) => setRemote(evt.target.value)}\n        />\n        <HStack>\n          <Button onClick={getKey}>Find a friend</Button>\n          <Button onClick={() => setOpen(true)}>Read QR Code</Button>\n        </HStack>\n      </Box>\n      <Modal isCentered closeOnEsc={false} isOpen={dialing} onClose={() => {}}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <Center h=\"50px\">\n                <Spinner mr=\"10px\" />\n                <Text>Phoning a friend</Text>\n              </Center>\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n      <Modal isOpen={open} onClose={() => setOpen(false)}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <QrReader\n                delay={300}\n                onError={(err: any) => console.log(err)}\n                onScan={(res: any) => {\n                  setRemote(res);\n                  if (res) setOpen(false);\n                }}\n                style={{ width: \"100%\" }}\n              />\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default PeerProfile;\n","import { pipe } from 'it-pipe'\nimport crypto from 'libp2p-crypto'\nimport libp2p from 'libp2p'\nimport PeerId from 'peer-id';\n\nexport const receive = async (stream: any, node: libp2p): Promise<string> => {\n    let pk = await crypto.keys.unmarshalPrivateKey(\n      node.peerId.marshalPrivKey()\n    );\n    let decryptedMsg = '';\n    await pipe(stream.source, async function (source) {\n      let message = \"\";\n      for await (const msg of source) {\n        message += msg.toString(\"utf8\");\n      }\n      let decryptedMsgArray = new Uint8Array(message.match(/.{1,2}/g)!.map((byte: string) => parseInt(byte, 16))\n      );\n      //@ts-ignore\n      decryptedMsg = new TextDecoder().decode(pk.decrypt(decryptedMsgArray));\n    });\n    return decryptedMsg;\n  };\n\nexport const send = async (msg: string, node: libp2p, peerId: PeerId, peerPubKey: any) => {\n\n    if (peerId) {\n      let found = await node.peerStore.get(peerId);\n      //@ts-ignore\n      let encryptedMessage = peerPubKey.encrypt(new TextEncoder().encode(msg));\n      let hexEncMsg = encryptedMessage.reduce(\n        (str: string, byte: number) => str + byte.toString(16).padStart(2, \"0\"),\n        \"\"\n      );\n      if (found && found.addresses.length > 0 && msg && node) {\n        try {\n          const { stream } = await node.dialProtocol(peerId, [\"/encryptedChat/1.0\"]);\n          pipe(hexEncMsg, stream);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  };","export const TYPING = '#1512BA';\nexport const NOT_TYPING = '#1512AB';\n\n","import {\n  Box,\n  HStack,\n  IconButton,\n  Input,\n  Skeleton,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { HashedBotIdenticon } from \"@digitalungdom/bot-identicon\";\nimport React from \"react\";\nimport { BiSend } from \"react-icons/bi\";\nimport GlobalContext from \"../context/globalContext\";\nimport { receive, send } from \"../providers/encryptedChat\";\nimport { NOT_TYPING, TYPING } from \"../context/constants\";\n\ninterface ChatProps {\n  chatOn: boolean;\n  chatOff: () => void;\n}\n\nconst ChatWindow: React.FC<ChatProps> = ({ chatOn, chatOff }) => {\n  const { state } = React.useContext(GlobalContext);\n  const [msg, setMsg] = React.useState<string>();\n  const [messageList, updateList] = React.useState<any[]>([]);\n  const [showTyping, setTyping] = React.useState(false);\n  const [stillTyping, setStillTyping] = React.useState(false);\n  const toast = useToast();\n\n  React.useEffect(() => {\n    state.libp2p!.handle(\"/encryptedChat/1.0\", async ({ stream }) => {\n      let mes = await receive(stream, state.libp2p!);\n      if (mes === TYPING) {\n        setTyping(true);\n      } else if (mes === NOT_TYPING) {\n        setTyping(false);\n      } else {\n        updateList((messages) => [...messages, { from: \"them\", message: mes }]);\n        setTyping(false);\n      }\n    });\n  });\n\n  React.useEffect(() => {\n    const checkPulse = async () => {\n      try {\n        console.log(\n          \"is anybody out there?\",\n          await state.libp2p!.ping(state.remotePeer!)\n        );\n        setTimeout(() => checkPulse(), 5000);\n      } catch (err) {\n        console.log(\"Error!\", err);\n        toast({\n          title: \"Connection lost!\",\n          description: \"Your friend seems to have disconnected.\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n        chatOff();\n        setMsg(\"\");\n        updateList([]);\n      }\n    };\n    if (chatOn) {\n      setTimeout(() => checkPulse(), 5000);\n    }\n  }, [chatOn]);\n\n  const sendMessage = async () => {\n    send(msg!, state.libp2p!, state.remotePeer!, state.remotePeerPubKey);\n    updateList((messages) => [...messages, { from: \"me\", message: msg! }]);\n    setMsg(\"\");\n    setStillTyping(false);\n  };\n\n  const typing = async (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setMsg(evt.target.value);\n    if (evt.target.value !== \"\" && !stillTyping) {\n      send(TYPING, state.libp2p!, state.remotePeer!, state.remotePeerPubKey);\n      setStillTyping(true);\n    }\n    if (evt.target.value === \"\" && stillTyping) {\n      send(\n        NOT_TYPING,\n        state.libp2p!,\n        state.remotePeer!,\n        state.remotePeerPubKey\n      );\n      setStillTyping(false);\n    }\n  };\n  return (\n    <Box>\n      <Box position=\"absolute\" height=\"100%\" w=\"100vw\" left=\"0px\">\n        {messageList.length > 0 &&\n          messageList.map((msg) => {\n            return (\n              <HStack key={msg.message}>\n                <HashedBotIdenticon\n                  identifier={\n                    msg.from === \"me\"\n                      ? state.libp2p?.peerId.toJSON().pubKey!\n                      : state.remotePeerPubKeyString\n                  }\n                  size={48}\n                />\n                <Text>{msg.message}</Text>\n              </HStack>\n            );\n          })}\n        {showTyping && (\n          <HStack>\n            <HashedBotIdenticon\n              identifier={state.remotePeerPubKeyString}\n              size={48}\n            />\n            <Skeleton>\n              <Text>\n                Some very long message that you'll never see!!! Hello!\n              </Text>\n            </Skeleton>\n          </HStack>\n        )}\n      </Box>\n      <HStack\n        justifyContent=\"center\"\n        spacing={3}\n        position=\"fixed\"\n        bottom=\"0px\"\n        left=\"0px\"\n        w=\"100vw\"\n      >\n        <HashedBotIdenticon\n          identifier={state.libp2p?.peerId.toJSON().pubKey!}\n          size={48}\n        />\n        <Input\n          opacity=\"100%\"\n          bg=\"white\"\n          placeholder=\"Say something\"\n          maxWidth=\"300px\"\n          value={msg}\n          onChange={(evt) => typing(evt)}\n          onKeyPress={(evt) => evt.key === \"Enter\" && sendMessage()}\n        />\n        <IconButton\n          aria-label=\"send message\"\n          isDisabled={msg === \"\" || !state.remotePeer}\n          onClick={sendMessage}\n          icon={<BiSend />}\n        />\n      </HStack>\n    </Box>\n  );\n};\n\nexport default ChatWindow;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}