{"version":3,"sources":["App.tsx","providers/encryptedChat.ts","reportWebVitals.ts","index.tsx"],"names":["node","receive","stream","a","crypto","keys","unmarshalPrivateKey","peerId","marshalPrivKey","pk","decryptedMsg","pipe","source","message","toString","decryptedMsgArray","Uint8Array","match","map","byte","parseInt","TextDecoder","decode","decrypt","send","msg","peerPubKey","peerStore","get","found","encryptedMessage","encrypt","TextEncoder","encode","hexEncMsg","reduce","str","padStart","addresses","length","dialProtocol","console","log","options","modules","transport","WS","WStar","connEncryption","NOISE","streamMuxer","mplex","pubsub","gossip","listen","config","enabled","App","React","useState","id","setId","setMsg","loading","setLoading","remotePeerKeyString","setRemote","setRemotePeerID","setPubKey","messageList","updateList","open","setOpen","chatOn","setChatOn","showTyping","setTyping","stillTyping","setStillTyping","dialing","setDialing","toast","useToast","onCopy","useClipboard","useEffect","startUp","checkPulse","ping","setTimeout","title","description","status","duration","isClosable","position","undefined","getKey","PeerID","createFromPubKey","peer","key","unmarshalPublicKey","marshalPubKey","time","Date","now","connected","Promise","resolve","create","bits","keyType","nodeId","nodeOptions","isStarted","stop","Libp2p","handle","mes","messages","from","start","toJSON","pubKey","toB58String","sendMessage","typing","evt","target","value","align","w","d","alignItems","isLoaded","identifier","size","mt","whiteSpace","overflow","textOverflow","cursor","onClick","height","width","placeholder","type","onChange","left","justifyContent","spacing","bottom","opacity","bg","maxWidth","onKeyPress","aria-label","isDisabled","icon","isOpen","onClose","delay","onError","err","onScan","res","style","isCentered","closeOnEsc","h","mr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.687006e8.chunk.js","sourcesContent":["import React from \"react\";\nimport Libp2p from \"libp2p\";\nimport WS from \"libp2p-websockets\";\nimport { NOISE } from \"libp2p-noise\";\nimport gossip from \"libp2p-gossipsub\";\nimport mplex from \"libp2p-mplex\";\nimport PeerID from \"peer-id\";\nimport WStar from \"libp2p-webrtc-star\";\nimport crypto from \"libp2p-crypto\";\nimport QRCode from \"qrcode.react\";\nimport QrReader from \"react-qr-scanner\";\nimport { HashedBotIdenticon } from \"@digitalungdom/bot-identicon\";\nimport { BiSend } from \"react-icons/bi\";\nimport {\n  Box,\n  Button,\n  Input,\n  Skeleton,\n  Text,\n  useClipboard,\n  VStack,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  HStack,\n  IconButton,\n  Textarea,\n  useToast,\n  Spinner,\n  Center,\n} from \"@chakra-ui/react\";\n\nimport { send, receive } from \"./providers/encryptedChat\";\n\nimport { RsaPublicKey } from \"crypto\";\n\nvar node: Libp2p;\n\nconst options = {\n  modules: {\n    transport: [WS, WStar],\n    connEncryption: [NOISE],\n    streamMuxer: [mplex],\n    pubsub: gossip,\n  },\n  addresses: {\n    listen: [\n      \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n      \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n      \"/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star\",\n    ],\n  },\n  config: {\n    pubsub: {\n      enabled: true,\n    },\n  },\n};\n\nexport default function App() {\n  const [id, setId] = React.useState(\"\");\n  const [msg, setMsg] = React.useState<string>();\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [remotePeerKeyString, setRemote] = React.useState<string>(\"\");\n  const [peerId, setRemotePeerID] = React.useState<PeerID>();\n  const [peerPubKey, setPubKey] = React.useState<RsaPublicKey>();\n  const [messageList, updateList] = React.useState<any[]>([]);\n  const [open, setOpen] = React.useState(false);\n  const [chatOn, setChatOn] = React.useState(false);\n  const [showTyping, setTyping] = React.useState(false);\n  const [stillTyping, setStillTyping] = React.useState(false);\n  const [dialing, setDialing] = React.useState(false);\n  const toast = useToast();\n  const { onCopy } = useClipboard(id);\n\n  React.useEffect(() => {\n    startUp();\n  }, []);\n\n  React.useEffect(() => {\n    const checkPulse = async () => {\n      try {\n        console.log('is anybody out there?', await node.ping(peerId!))\n        setTimeout(() => checkPulse(), 5000)\n      }\n      catch (err) {\n        console.log('Error!', err)\n        toast({\n          title: \"Connection lost!\",\n          description: \"Your friend seems to have disconnected.\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n        setRemote('');\n        setChatOn(false);\n        setPubKey(undefined)\n        setRemotePeerID(undefined)\n        setMsg('')\n        updateList([])\n      }\n    }\n    if (chatOn) {\n      setTimeout(() => checkPulse(), 5000);\n    }\n  }, [chatOn])\n\n  const getKey = async () => {\n    if (remotePeerKeyString) {\n      setDialing(true);\n      let peer: PeerID;\n      let key: crypto.PublicKey;\n      try {\n        peer = await PeerID.createFromPubKey(remotePeerKeyString);\n        key = crypto.keys.unmarshalPublicKey(peer.marshalPubKey());\n      } catch (err) {\n        console.log(\"Error!\", err);\n        toast({\n          title: \"Invalid address\",\n          description: \"Scan your friend's QR code and try again\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n        setRemote(\"\");\n        setDialing(false);\n        return;\n      }\n      let time = Date.now();\n      let connected = false;\n      do {\n        try {\n          console.log(\"ping \", await node.ping(peer));\n          connected = true;\n        } catch (err) {\n          await new Promise((resolve) => setTimeout(resolve, 2000));\n          console.log(\"Error!\", err);\n        }\n      } while (Date.now() - time < 5000 && !connected);\n      if (connected) {\n        setRemotePeerID(peer);\n        //@ts-ignore\n        setPubKey(key as RsaPublicKey);\n        setChatOn(true);\n      } else {\n        toast({\n          title: \"Couldn't find friend!\",\n          description: \"Scan your friend's QR code and try again\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n          position: \"top\",\n        });\n      }\n      setRemote(\"\");\n      setDialing(false);\n    }\n  };\n\n  const startUp = async () => {\n    setLoading(true);\n    let nodeId = await PeerID.create({ bits: 1024, keyType: \"RSA\" });\n    let nodeOptions = { ...options, peerId: nodeId };\n    if (node && node.isStarted) await node.stop();\n    //@ts-ignore\n    node = await Libp2p.create(nodeOptions);\n\n    await node.handle(\"/encryptedChat/1.0\", async ({ stream }) => {\n      let mes = await receive(stream, node);\n      if (mes === \"#1512BA\") {\n        setTyping(true);\n      } else if (mes === \"#1512AB\") {\n        setTyping(false);\n      } else {\n        updateList((messages) => [...messages, { from: \"them\", message: mes }]);\n        setTyping(false);\n      }\n    });\n    await node.start();\n    setId(node.peerId.toJSON().pubKey!);\n    console.log(\"listening on: \" + node.peerId.toB58String());\n    setLoading(false);\n  };\n\n  const sendMessage = async () => {\n    send(msg!, node, peerId!, peerPubKey);\n    updateList((messages) => [...messages, { from: \"me\", message: msg! }]);\n    setMsg(\"\");\n    setStillTyping(false);\n  };\n\n  const typing = async (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setMsg(evt.target.value);\n    if (evt.target.value !== \"\" && !stillTyping) {\n      send(\"#1512BA\", node, peerId!, peerPubKey);\n      setStillTyping(true);\n    }\n    if (evt.target.value === \"\" && stillTyping) {\n      send(\"#1512AB\", node, peerId!, peerPubKey);\n      setStillTyping(false);\n    }\n  };\n\n  return (\n    <VStack align=\"center\" w=\"100vw\">\n      {!chatOn && (\n        <>\n          <Box d=\"flex\" alignItems=\"baseline\">\n            <Skeleton isLoaded={!loading && id !== \"\"}>\n              <HashedBotIdenticon identifier={id} />\n            </Skeleton>\n            <Skeleton isLoaded={!loading && id !== \"\"}>\n              <Box align=\"center\">\n                <QRCode value={id ? id : \"\"} size={200} />\n                <Text\n                  mt={2}\n                  whiteSpace=\"nowrap\"\n                  overflow=\"hidden\"\n                  textOverflow=\"ellipsis\"\n                  w=\"200px\"\n                  cursor=\"pointer\"\n                  onClick={onCopy}\n                >\n                  {node && node.peerId.toJSON().pubKey}\n                </Text>\n              </Box>\n            </Skeleton>\n          </Box>\n          <Box d=\"flex\" alignItems=\"baseline\">\n            <Skeleton isLoaded={remotePeerKeyString !== \"\"}>\n              <HashedBotIdenticon identifier={remotePeerKeyString} />\n            </Skeleton>\n            <Box align=\"center\">\n              <Textarea\n                height=\"200px\"\n                width=\"200px\"\n                value={remotePeerKeyString}\n                placeholder=\"Peer's Public Key\"\n                type=\"password\"\n                onChange={(evt) => setRemote(evt.target.value)}\n              />\n              <HStack>\n                <Button onClick={getKey}>Find a friend</Button>\n                <Button onClick={() => setOpen(true)}>Read QR Code</Button>\n              </HStack>\n            </Box>\n          </Box>\n        </>\n      )}\n      {chatOn && (\n        <Box>\n          <Box position=\"absolute\" height=\"100%\" w=\"100vw\" left=\"0px\">\n            {messageList.length > 0 &&\n              messageList.map((msg) => {\n                return (\n                  <HStack key={msg.message}>\n                    <HashedBotIdenticon\n                      identifier={msg.from === \"me\" ? id : remotePeerKeyString}\n                      size={48}\n                    />\n                    <Text>{msg.message}</Text>\n                  </HStack>\n                );\n              })}\n            {showTyping && (\n              <HStack>\n                <HashedBotIdenticon\n                  identifier={remotePeerKeyString}\n                  size={48}\n                />\n                <Skeleton>\n                  <Text>\n                    Some very long message that you'll never see!!! Hello!\n                  </Text>\n                </Skeleton>\n              </HStack>\n            )}\n          </Box>\n          <HStack\n            justifyContent=\"center\"\n            spacing={3}\n            position=\"fixed\"\n            bottom=\"0px\"\n            left=\"0px\"\n            w=\"100vw\"\n          >\n            <HashedBotIdenticon identifier={id} size={48} />\n            <Input\n              opacity=\"100%\"\n              bg=\"white\"\n              placeholder=\"Say something\"\n              maxWidth=\"300px\"\n              value={msg}\n              onChange={(evt) => typing(evt)}\n              onKeyPress={(evt) => evt.key === \"Enter\" && sendMessage()}\n            />\n            <IconButton\n              aria-label=\"send message\"\n              isDisabled={msg === \"\" || !peerId}\n              onClick={sendMessage}\n              icon={<BiSend />}\n            />\n          </HStack>\n        </Box>\n      )}\n      <Modal isOpen={open} onClose={() => setOpen(false)}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <QrReader\n                delay={300}\n                onError={(err: any) => console.log(err)}\n                onScan={(res: any) => {\n                  setRemote(res);\n                  if (res) setOpen(false);\n                }}\n                style={{ width: \"100%\" }}\n              />\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n      <Modal isCentered closeOnEsc={false} isOpen={dialing} onClose={() => { }}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <Center h=\"50px\">\n                <Spinner mr=\"10px\"/>\n                <Text>Phoning a friend</Text>\n              </Center>\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </VStack>\n  );\n}\n","import { pipe } from 'it-pipe'\nimport crypto from 'libp2p-crypto'\nimport libp2p from 'libp2p'\nimport PeerId from 'peer-id';\n\nexport const receive = async (stream: any, node: libp2p): Promise<string> => {\n    let pk = await crypto.keys.unmarshalPrivateKey(\n      node.peerId.marshalPrivKey()\n    );\n    let decryptedMsg = '';\n    await pipe(stream.source, async function (source) {\n      let message = \"\";\n      for await (const msg of source) {\n        message += msg.toString(\"utf8\");\n      }\n      let decryptedMsgArray = new Uint8Array(message.match(/.{1,2}/g)!.map((byte: string) => parseInt(byte, 16))\n      );\n      //@ts-ignore\n      decryptedMsg = new TextDecoder().decode(pk.decrypt(decryptedMsgArray));\n    });\n    return decryptedMsg;\n  };\n\nexport const send = async (msg: string, node: libp2p, peerId: PeerId, peerPubKey: any) => {\n\n    if (peerId) {\n      let found = await node.peerStore.get(peerId);\n      //@ts-ignore\n      let encryptedMessage = peerPubKey.encrypt(new TextEncoder().encode(msg));\n      let hexEncMsg = encryptedMessage.reduce(\n        (str: string, byte: number) => str + byte.toString(16).padStart(2, \"0\"),\n        \"\"\n      );\n      if (found && found.addresses.length > 0 && msg && node) {\n        try {\n          const { stream } = await node.dialProtocol(peerId, [\"/encryptedChat/1.0\"]);\n          pipe(hexEncMsg, stream);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  };","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}