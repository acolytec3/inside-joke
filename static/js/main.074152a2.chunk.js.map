{"version":3,"sources":["App.tsx","providers/encryptedChat.ts","reportWebVitals.ts","index.tsx"],"names":["node","receive","stream","a","crypto","keys","unmarshalPrivateKey","peerId","marshalPrivKey","pk","decryptedMsg","pipe","source","message","toString","decryptedMsgArray","Uint8Array","match","map","byte","parseInt","TextDecoder","decode","decrypt","send","msg","peerPubKey","peerStore","get","found","encryptedMessage","encrypt","TextEncoder","encode","hexEncMsg","reduce","str","padStart","addresses","length","dialProtocol","console","log","options","modules","transport","WS","WStar","connEncryption","NOISE","streamMuxer","mplex","pubsub","gossip","listen","config","enabled","App","React","useState","id","setId","setMsg","loading","setLoading","remotePeerKeyString","setRemote","setRemotePeerID","setPubKey","messageList","updateList","open","setOpen","onCopy","useClipboard","useEffect","PeerID","createFromPubKey","peer","key","unmarshalPublicKey","marshalPubKey","getKey","startUp","create","bits","keyType","nodeId","nodeOptions","isStarted","stop","Libp2p","handle","mes","start","toJSON","pubKey","toB58String","align","w","onClick","size","isLoaded","whiteSpace","overflow","textOverflow","cursor","value","placeholder","onChange","evt","target","isDisabled","isOpen","onClose","delay","onError","err","onScan","res","style","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.074152a2.chunk.js","sourcesContent":["import React from \"react\";\nimport Libp2p from \"libp2p\";\nimport WS from \"libp2p-websockets\";\nimport { NOISE } from \"libp2p-noise\";\nimport gossip from \"libp2p-gossipsub\";\nimport mplex from \"libp2p-mplex\";\nimport PeerID from \"peer-id\";\nimport WStar from \"libp2p-webrtc-star\";\nimport crypto from \"libp2p-crypto\";\nimport QRCode from 'qrcode.react';\nimport QrReader from 'react-qr-scanner'\nimport {\n  Box,\n  Button,\n  Heading,\n  Input,\n  Skeleton,\n  Text,\n  useClipboard,\n  VStack, Modal, ModalOverlay, ModalContent, ModalBody\n} from \"@chakra-ui/react\";\n\nimport { send, receive} from './providers/encryptedChat'\n\nimport { RsaPublicKey } from \"crypto\";\n\nvar node: Libp2p;\n\nconst options = {\n  modules: {\n    transport: [WS, WStar],\n    connEncryption: [NOISE],\n    streamMuxer: [mplex],\n    pubsub: gossip,\n  },\n  addresses: {\n    listen: [\n    //  \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n    //  \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n      \"/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star\",\n    ],\n  },\n  config: {\n    pubsub: {\n      enabled: true,\n    },\n  },\n};\n\nexport default function App() {\n  const [id, setId] = React.useState(\"\");\n  const [msg, setMsg] = React.useState<string>();\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [remotePeerKeyString, setRemote] = React.useState<string>();\n  const [peerId, setRemotePeerID] = React.useState<PeerID>();\n  const [peerPubKey, setPubKey] = React.useState<RsaPublicKey>();\n  const [messageList, updateList] = React.useState<string[]>([]);\n  const [open, setOpen] = React.useState(false);\n  const { onCopy } = useClipboard(id);\n\n  React.useEffect(() => {\n    const getKey = async () => {\n      if (remotePeerKeyString) {\n        let peer = await PeerID.createFromPubKey(remotePeerKeyString);\n        let key = crypto.keys.unmarshalPublicKey(peer.marshalPubKey());\n        setRemotePeerID(peer);\n        //@ts-ignore\n        setPubKey(key as RsaPublicKey);\n      }\n    };\n    if (remotePeerKeyString) {\n      getKey();\n    }\n  }, [remotePeerKeyString]);\n\n  const startUp = async () => {\n    setLoading(true);\n    let nodeId = await PeerID.create({ bits: 1024, keyType: \"RSA\" });\n    let nodeOptions = { ...options, peerId: nodeId };\n    if (node && node.isStarted) await node.stop();\n    //@ts-ignore\n    node = await Libp2p.create(nodeOptions);\n\n    await node.handle(\"/encryptedChat/1.0\", async ({ stream }) => {\n      let mes = await receive(stream, node);\n      updateList([mes])\n    });\n    await node.start();\n    setId(node.peerId.toJSON().pubKey!);\n    console.log(\"listening on: \" + node.peerId.toB58String());\n    setLoading(false);\n  };\n\n  return (\n    <VStack align=\"center\" w=\"100vw\">\n      <Heading>Inside Joke</Heading>\n      <Button onClick={() => startUp()}>Start Node</Button>\n      <Button onClick={() => setOpen(true)}>Read QR Code</Button>\n      <VStack>\n        <Heading size=\"sm\">Public Key</Heading>\n        <Skeleton isLoaded={!loading && id !== \"\"}>\n          <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\" w=\"200px\" cursor=\"pointer\" onClick={onCopy}>\n            {node && node.peerId.toJSON().pubKey}\n          </Text>\n        </Skeleton>\n        <Skeleton isLoaded={!loading && id !== \"\"}>\n          <QRCode value={id ? id : ''} />\n        </Skeleton>\n      </VStack>\n      <Input\n        value={remotePeerKeyString}\n        placeholder=\"Target Listener address\"\n        onChange={(evt) => setRemote(evt.target.value)}\n      />\n      {node && node.isStarted && (\n        <Box>\n          <Input value={msg} onChange={(evt) => setMsg(evt.target.value)} />\n          <Button isDisabled={msg === '' || !peerId} onClick={() => { send(msg!, node, peerId!, peerPubKey!); setMsg('')}}>Send Message</Button>\n          {messageList.length > 0 &&\n            messageList.map((msg) => {\n              return <Text>{msg}</Text>;\n            })}\n        </Box>\n      )}\n      <Modal isOpen={open} onClose={() => setOpen(false)}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalBody>\n              <QrReader\n                delay={300}\n                onError={(err: any) => console.log(err)}\n                onScan={(res: any) => { setRemote(res); if (res) setOpen(false) }}\n                style={{ width: '100%' }}\n              />\n            </ModalBody>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </VStack>\n  );\n}\n","import { pipe } from 'it-pipe'\nimport crypto from 'libp2p-crypto'\nimport libp2p from 'libp2p'\nimport PeerId from 'peer-id';\n\nexport const receive = async (stream: any, node: libp2p): Promise<string> => {\n    let pk = await crypto.keys.unmarshalPrivateKey(\n      node.peerId.marshalPrivKey()\n    );\n    let decryptedMsg = '';\n    await pipe(stream.source, async function (source) {\n      let message = \"\";\n      for await (const msg of source) {\n        message += msg.toString(\"utf8\");\n      }\n      let decryptedMsgArray = new Uint8Array(message.match(/.{1,2}/g)!.map((byte: string) => parseInt(byte, 16))\n      );\n      //@ts-ignore\n      decryptedMsg = new TextDecoder().decode(pk.decrypt(decryptedMsgArray));\n    });\n    return decryptedMsg;\n  };\n\nexport const send = async (msg: string, node: libp2p, peerId: PeerId, peerPubKey: any) => {\n\n    if (peerId) {\n      let found = await node.peerStore.get(peerId);\n      //@ts-ignore\n      let encryptedMessage = peerPubKey.encrypt(new TextEncoder().encode(msg));\n      let hexEncMsg = encryptedMessage.reduce(\n        (str: string, byte: number) => str + byte.toString(16).padStart(2, \"0\"),\n        \"\"\n      );\n      if (found && found.addresses.length > 0 && msg && node) {\n        try {\n          const { stream } = await node.dialProtocol(peerId, [\"/encryptedChat/1.0\"]);\n          pipe(hexEncMsg, stream);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  };","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}